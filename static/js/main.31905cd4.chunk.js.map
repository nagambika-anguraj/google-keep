{"version":3,"sources":["components/NoteEntry/NoteEntry.module.css","components/NotesList/NotesList.module.css","components/TakeANote/TakeAnote.module.css","components/TakeANote/TakeAnote.js","config.js","store/actions.js","components/NoteEntry/NoteEntry.js","components/NotesList/NotesList.js","container/main.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","takeanote","props","className","classes","Note","onClick","clicked","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","addNote","value","id","type","noteValue","NoteEntry","state","textAreaValue","textAreaChanged","event","target","setState","clearTextArea","document","getElementById","ParentEntry","Entry","placeholder","onChange","Close","this","alt","src","Component","connect","note","dispatch","Id","shortid","generate","ref","push","notes","deleteNote","result","axios","get","then","response","encryptedKey","Object","keys","data","forEach","key","child","remove","catch","error","console","log","actionTypes","map","ParentList","Main","showNote","noteList","noteClickHandler","stateToggle","NotesList","App","Boolean","window","location","hostname","match","initialState","reducer","action","concat","filter","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.31905cd4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ParentEntry\":\"NoteEntry_ParentEntry__18dya\",\"Entry\":\"NoteEntry_Entry__2_Ccs\",\"Close\":\"NoteEntry_Close__1HGD2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ParentList\":\"NotesList_ParentList__tBhiF\",\"Note\":\"NotesList_Note__3hd8P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Note\":\"TakeAnote_Note__2ru6U\"};","import React from 'react';\r\nimport classes from './TakeAnote.module.css'\r\n\r\nconst takeanote = (props) => (\r\n    <div className={classes.Note} onClick={props.clicked}>\r\n       Take a note\r\n   </div>\r\n)\r\n\r\nexport default takeanote","import * as firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCJa7Fl_PaSQXhABm9a_oJmowEuJE6TSyY\",\r\n    authDomain: \"notes-797ad.firebaseapp.com\",\r\n    databaseURL: \"https://notes-797ad.firebaseio.com\",\r\n    projectId: \"notes-797ad\",\r\n    storageBucket: \"notes-797ad.appspot.com\",\r\n    messagingSenderId: \"349705242499\",\r\n    appId: \"1:349705242499:web:9afc4ee287286225a618b6\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);","import axios from 'axios'\r\n//import FIREBASE's config.js file\r\nimport \"../config\"\r\nimport * as firebase from 'firebase'\r\nimport shortid from 'shortid'\r\n\r\nexport const ADD_NOTE = 'ADD_NOTE';\r\nexport const DELETE_NOTE = 'DELETE_NOTE';\r\n\r\n//Synchronous Action Creators\r\nexport const addNote = (value, id) => {\r\n    return{\r\n        type: ADD_NOTE,\r\n        noteValue: value,\r\n        id: id\r\n    }\r\n}\r\n\r\n//Synchronous Action Creators\r\nexport const deleteNote = (id) => {\r\n    return{\r\n        type: DELETE_NOTE,\r\n        id: id\r\n    }\r\n}\r\n\r\n//Asynchronous Action Creators\r\n//Do FIREBASE call here to POST a NOTE\r\nexport const saveNote = (value) => {\r\n    return dispatch => {\r\n          const Id = shortid.generate()\r\n            firebase.database().ref(\"notes\")\r\n            .push({\r\n                value: value,\r\n                id: Id\r\n            })   \r\n        dispatch(addNote(value, Id))\r\n    }\r\n}\r\n\r\n//Asynchronous Action Creators\r\n//Do FIREBASE call here to DELETE a Note\r\nexport const removeNote = (id) => {\r\n    return dispatch =>{\r\n        const result = []\r\n        //using axios instead of Firebase to fetch the appropriate Key of selected Note to delete\r\n        axios.get('https://notes-797ad.firebaseio.com/notes.json')\r\n        .then(response =>{\r\n            var encryptedKey = '';\r\n\r\n            const data = Object.keys(response.data);\r\n            //iterating through the Firebase's Notes node to fetch the encrypted key associated with the clicked note ID\r\n            data.forEach(function (key) {\r\n             result.push(response.data[key]);\r\n               if(response.data[key].id === id) encryptedKey = key     \r\n            });\r\n     \r\n            firebase.database()\r\n            .ref('notes')\r\n            .child(encryptedKey)\r\n            .remove() \r\n\r\n            dispatch(deleteNote(id))\r\n        })\r\n        .catch(error => console.log(error))\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport classes from \"./NoteEntry.module.css\";\r\nimport {connect} from 'react-redux';\r\nimport * as actionTypes from '../../store/actions'\r\n//Change this component to Stateful\r\n\r\nclass NoteEntry extends Component{\r\n\r\n    state={\r\n        textAreaValue: ''\r\n    }\r\n    textAreaChanged = (event) => {\r\n        const value = event.target.value\r\n       \r\n       this.setState({\r\n           textAreaValue: value\r\n       })\r\n    }\r\n    clearTextArea = () => {\r\n      document.getElementById('textArea').value = '';\r\n      //Call the addNote of the reducer to dispatch action\r\n      this.props.addNote(this.state.textAreaValue)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className={classes.ParentEntry}>\r\n            <textarea\r\n              id=\"textArea\"\r\n              className={classes.Entry}\r\n              placeholder=\"Please enter Note here\"\r\n              onChange={(event) => {this.textAreaChanged(event)}}\r\n            ></textarea>\r\n            <div className={classes.Close} onClick={this.clearTextArea}>\r\n              <img\r\n                alt=\"Save and Close\"\r\n                src=\"https://img.icons8.com/plasticine/100/000000/save-close.png\"\r\n              />\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        addNote: (noteValue) => dispatch(actionTypes.saveNote(noteValue))\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n   return{\r\n     note: state.note\r\n   } \r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteEntry);\r\n\r\n","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport * as actionTypes from '../../store/actions'\r\nimport classes from './NotesList.module.css'\r\n\r\nconst notesList = (props) => {\r\n   \r\n    let notes = props.notes.map( note => {\r\n        return (\r\n            <div className={classes.Note} \r\n                 key={note.id} \r\n                 onClick={() => props.deleteNote(note.id)}>\r\n                {note.value}\r\n            </div>\r\n        )\r\n    })\r\n    return(\r\n       <div className={classes.ParentList}> {notes} </div>\r\n    )\r\n}\r\n  \r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        notes: state.note\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        deleteNote: (id) => dispatch(actionTypes.removeNote(id))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(notesList)","import React, {Component} from 'react';\r\nimport Note from '../components/TakeANote/TakeAnote';\r\nimport NoteEntry from '../components/NoteEntry/NoteEntry'\r\nimport NotesList from '../components/NotesList/NotesList'\r\nimport {connect} from 'react-redux';\r\nimport * as actionTypes from '../store/actions'\r\nimport axios from 'axios'\r\n\r\nclass Main extends Component {\r\n    state={\r\n        showNote: true,\r\n        noteList: []\r\n    }\r\n\r\n    componentDidMount() {\r\n         axios.get('https://notes-797ad.firebaseio.com/notes.json')\r\n          .then(response => {\r\n              const data = Object.keys(response.data)\r\n\r\n              data.forEach( key => {\r\n                  this.props.addNote(response.data[key].value, response.data[key].id)\r\n              })\r\n          })\r\n          .catch(error => console.log(error)) \r\n    }\r\n\r\n    noteClickHandler = () => {\r\n        var stateToggle = !this.state.showNote;\r\n        //This toggles the state\r\n        this.setState({\r\n          showNote: stateToggle,\r\n        });\r\n        //Here we need to be able to add the notes to the state as well.\r\n        console.log(stateToggle);\r\n    }\r\n\r\n    render() {\r\n        let note = this.state.showNote ? \r\n                 <Note clicked={this.noteClickHandler}/> : \r\n                 <NoteEntry clicked={this.noteClickHandler}/>\r\n        return(\r\n            <div>\r\n                 {note}\r\n                 <NotesList/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        note: state.note\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addNote: (value, id) => dispatch (actionTypes.addNote(value, id))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import React from 'react';\nimport './App.css';\nimport Main from './container/main'\nimport './config'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actions'\r\n\r\nconst initialState = {\r\n    note: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.ADD_NOTE: \r\n            return{\r\n                ...state,\r\n                note: state.note.concat({\r\n                    id: action.id,\r\n                    value: action.noteValue\r\n                })\r\n            }\r\n        case actionTypes.DELETE_NOTE:\r\n            return{\r\n                ...state,\r\n                note: state.note.filter(note => {\r\n                    return note.id !== action.id\r\n                })\r\n            }\r\n        default: return state\r\n        }\r\n    }\r\n\r\nexport default reducer; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reducer from './store/reducer'\nimport thunk from 'redux-thunk'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n      <React.StrictMode> \n    <App />\n  </React.StrictMode>\n  </Provider>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}